import telebot
import requests
import json
import API
import re
from telebot import types

bot = telebot.TeleBot(API.token)


@bot.message_handler(commands=['start'])
def help_com(message):
    start_key = types.ReplyKeyboardMarkup()
    start_key.row('–ù–∞–π—Ç–∏ –±–∞—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏')
    start_key.row('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–∞—Ä—É')
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=start_key)


@bot.message_handler(content_types=['text'])
def key_answer(message):
    if message.text == '–ù–∞–π—Ç–∏ –±–∞—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏':
        bot.send_message(message.chat.id, '–ù–µ –∑–∞–±—É–¥—å –≤–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–≤ –º–µ—Ç—Ä–∞—Ö)')

    elif re.match(r'\d{' + str(len(message.text)) + '}', message.text) != None:
        latitude = int(message.text) / (1000 * 111)
        longitude = int(message.text) / (1000 * 62.6)
        global part_of_requeuest
        part_of_requeuest = str(longitude) + ',' + str(latitude)
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text="–ò –≥–¥–µ –∂–µ —Ç—ã?", request_location=True)
        button_home = types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard.add(button_geo)
        keyboard.add(button_home)
        bot.send_message(message.chat.id, '–ñ–¥—É —Ç–≤–æ–µ –≥–µ–æüóø', reply_markup=keyboard)
    elif message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ —á–∞—Ç–µ", url="https://t.me/beer_feedback")
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ —Ç–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=keyboard)
    elif message.text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–∞—Ä—É' or message.text == '–°–æ—Ä—Ç–∞ –ø–∏–≤–∞':
        bot.send_message(message.chat.id, "–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        bot.send_message(message.chat.id, "–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –º—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø–∏—Ç—å –ø–∏–≤–æ –∏ –∑–∞–Ω—è–ª–∏—Å—å –ø—Ä–æ–µ–∫—Ç–æ–º")
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start_key = types.ReplyKeyboardMarkup()
        start_key.row('–ù–∞–π—Ç–∏ –±–∞—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏', '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–∞—Ä—É')
        start_key.row('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=start_key)
    else:
        bot.send_message(message.chat.id, "–ß–µ–ª, –Ω–µ –ø–æ—Ä–∏ –¥–∏—á—å. –ì–æ –≤—ã–ø—å–µ–º –ø–∏–≤–∫–∞ üçª")


@bot.message_handler(content_types=['location'])
def find_bar(message):
    if message.location is not None:
        start_key = types.ReplyKeyboardMarkup()
        start_key.row('–ù–∞–π—Ç–∏ –±–∞—Ä –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏')
        start_key.row('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–∞—Ä—É')
        req = 'https://search-maps.yandex.ru/v1/?apikey=' + API.yand + '&text=–±–∞—Ä&lang=ru_RU&ll=' + str(
            message.location.longitude) + ',' + str(message.location.latitude) + '&spn=' + part_of_requeuest + '&rspn=1'
        user_name = str(message.from_user.username)
        response = requests.get(req)
        js_bars = response.text
        js_bars = json.loads(js_bars)
        cord = str(message.location.latitude) + ',' + str(message.location.longitude)
        print(user_name)
        print(req)
        if js_bars['features'] != 0:
            for i in range(0, len(js_bars['features'])):
                bar_stat = ''
                bar_hours = ''
                bar_link = ''
                bar_category = ''
                bar_name = js_bars['features'][i]['properties']['name']
                bar_address = js_bars['features'][i]['properties']['CompanyMetaData']['address'] + ';'
                bar_stat = bar_name + '\n' + bar_address + '\n'
                try:
                    bar_hours = js_bars['features'][i]['properties']['CompanyMetaData']['Hours']['text']
                    bar_stat += bar_hours + '\n'
                except:
                    bar_hours = '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
                try:
                    bar_link = js_bars['features'][i]['properties']['CompanyMetaData']['url']
                    bar_stat += bar_link + '\n'
                except:
                    bar_link = '–°—Å—ã–∫–∞ –Ω–∞ —Å–∞–π—Ç –±–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                print('–ü–µ—Ä–µ–¥ –∫–æ—Ç–∏–≥–æ—Ä–∏—è–º–∏ i = ' + str(i))
                try:
                    for j in range(0, len(js_bars['features'][i]['properties']['CompanyMetaData']['Categories'])):
                        bar_category += js_bars['features'][i]['properties']['CompanyMetaData']['Categories'][j][
                                            'name'] + ';'
                    bar_stat += bar_category
                except:
                    bar_category = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É –±–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    bar_stat += bar_category

                bot.send_message(message.from_user.id, str(bar_stat))
                lat = js_bars['features'][i]['geometry']['coordinates'][1]
                lng = js_bars['features'][i]['geometry']['coordinates'][0]
                print(float(lat), ' , ', float(lng))
                bot.send_venue(message.chat.id, latitude=float(lat), longitude=float(lng), title=bar_name,
                               address=bar_address)
        else:
            bot.send_message(message.from_user.id, "–ù–µ—Ç –±–∞—Ä–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", reply_markup=start_key)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=start_key)


bot.polling(none_stop=True)
